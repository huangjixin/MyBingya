var DD_belatedPNG = {
    ns: "DD_belatedPNG",
    imgSize: {},
    delay: 10,
    nodesFixed: 0,
    createVmlNameSpace: function() {
        if (document.namespaces && !document.namespaces[this.ns]) document.namespaces.add(this.ns, "urn:schemas-microsoft-com:vml")
    },
    createVmlStyleSheet: function() {
        var _, $;
        _ = document.createElement("style");
        _.setAttribute("media", "screen");
        document.documentElement.firstChild.insertBefore(_, document.documentElement.firstChild.firstChild);
        if (_.styleSheet) {
            _ = _.styleSheet;
            _.addRule(this.ns + "\\:*", "{behavior:url(#default#VML)}");
            _.addRule(this.ns + "\\:shape", "position:absolute;");
            _.addRule("img." + this.ns + "_sizeFinder", "behavior:none; border:none; position:absolute; z-index:-1; top:-10000px; visibility:hidden;");
            this.screenStyleSheet = _;
            $ = document.createElement("style");
            $.setAttribute("media", "print");
            document.documentElement.firstChild.insertBefore($, document.documentElement.firstChild.firstChild);
            $ = $.styleSheet;
            $.addRule(this.ns + "\\:*", "{display: none !important;}");
            $.addRule("img." + this.ns + "_sizeFinder", "{display: none !important;}")
        }
    },
    readPropertyChange: function() {
        var _, A, $;
        _ = event.srcElement;
        if (!_.vmlInitiated) return;
        if (event.propertyName.search("background") != -1 || event.propertyName.search("border") != -1) DD_belatedPNG.applyVML(_);
        if (event.propertyName == "style.display") {
            A = (_.currentStyle.display == "none") ? "none": "block";
            for ($ in _.vml) if (_.vml.hasOwnProperty($)) _.vml[$].shape.style.display = A
        }
        if (event.propertyName.search("filter") != -1) DD_belatedPNG.vmlOpacity(_)
    },
    vmlOpacity: function(_) {
        if (_.currentStyle.filter.search("lpha") != -1) {
            var $ = _.currentStyle.filter;
            $ = parseInt($.substring($.lastIndexOf("=") + 1, $.lastIndexOf(")")), 10) / 100;
            _.vml.color.shape.style.filter = _.currentStyle.filter;
            _.vml.image.fill.opacity = $
        }
    },
    handlePseudoHover: function($) {
        setTimeout(function() {
            DD_belatedPNG.applyVML($)
        },
        1)
    },
    fix: function($) {
        if (this.screenStyleSheet) {
            var _, A;
            _ = $.split(",");
            for (A = 0; A < _.length; A++) this.screenStyleSheet.addRule(_[A], "behavior:expression(DD_belatedPNG.fixPng(this))")
        }
    },
    applyVML: function($) {
        $.runtimeStyle.cssText = "";
        this.vmlFill($);
        this.vmlOffsets($);
        this.vmlOpacity($);
        if ($.isImg) this.copyImageBorders($)
    },
    attachHandlers: function(_) {
        var B, E, D, $, A, C;
        B = this;
        E = {
            resize: "vmlOffsets",
            move: "vmlOffsets"
        };
        if (_.nodeName == "A") {
            $ = {
                mouseleave: "handlePseudoHover",
                mouseenter: "handlePseudoHover",
                focus: "handlePseudoHover",
                blur: "handlePseudoHover"
            };
            for (A in $) if ($.hasOwnProperty(A)) E[A] = $[A]
        }
        for (C in E) if (E.hasOwnProperty(C)) {
            D = function() {
                B[E[C]](_)
            };
            _.attachEvent("on" + C, D)
        }
        _.attachEvent("onpropertychange", this.readPropertyChange)
    },
    giveLayout: function($) {
        $.style.zoom = 1;
        if ($.currentStyle.position == "static") $.style.position = "relative"
    },
    copyImageBorders: function(_) {
        var A, $;
        A = {
            "borderStyle": true,
            "borderWidth": true,
            "borderColor": true
        };
        for ($ in A) if (A.hasOwnProperty($)) _.vml.color.shape.style[$] = _.currentStyle[$]
    },
    vmlFill: function(C) {
        if (!C.currentStyle) return;
        else {
            var $, E, A, _, D, B;
            $ = C.currentStyle
        }
        for (_ in C.vml) if (C.vml.hasOwnProperty(_)) C.vml[_].shape.style.zIndex = $.zIndex;
        C.runtimeStyle.backgroundColor = "";
        C.runtimeStyle.backgroundImage = "";
        E = true;
        if ($.backgroundImage != "none" || C.isImg) {
            if (!C.isImg) {
                C.vmlBg = $.backgroundImage;
                C.vmlBg = C.vmlBg.substr(5, C.vmlBg.lastIndexOf("\")") - 5)
            } else C.vmlBg = C.src;
            A = this;
            if (!A.imgSize[C.vmlBg]) {
                D = document.createElement("img");
                A.imgSize[C.vmlBg] = D;
                D.className = A.ns + "_sizeFinder";
                D.runtimeStyle.cssText = "behavior:none; position:absolute; left:-10000px; top:-10000px; border:none; margin:0; padding:0;";
                B = function() {
                    this.width = this.offsetWidth;
                    this.height = this.offsetHeight;
                    A.vmlOffsets(C)
                };
                D.attachEvent("onload", B);
                D.src = C.vmlBg;
                D.removeAttribute("width");
                D.removeAttribute("height");
                document.body.insertBefore(D, document.body.firstChild)
            }
            C.vml.image.fill.src = C.vmlBg;
            E = false
        }
        C.vml.image.fill.on = !E;
        C.vml.image.fill.color = "none";
        C.vml.color.shape.style.backgroundColor = $.backgroundColor;
        C.runtimeStyle.backgroundImage = "none";
        C.runtimeStyle.backgroundColor = "transparent"
    },
    vmlOffsets: function(F) {
        var I, D, G, H, J, C, $, B, _, A, E;
        I = F.currentStyle;
        D = {
            "W": F.clientWidth + 1,
            "H": F.clientHeight + 1,
            "w": this.imgSize[F.vmlBg].width,
            "h": this.imgSize[F.vmlBg].height,
            "L": F.offsetLeft,
            "T": F.offsetTop,
            "bLW": F.clientLeft,
            "bTW": F.clientTop
        };
        G = (D.L + D.bLW == 1) ? 1 : 0;
        H = function(_, C, A, $, D, B) {
            _.coordsize = $ + "," + D;
            _.coordorigin = B + "," + B;
            _.path = "m0,0l" + $ + ",0l" + $ + "," + D + "l0," + D + " xe";
            _.style.width = $ + "px";
            _.style.height = D + "px";
            _.style.left = C + "px";
            _.style.top = A + "px"
        };
        H(F.vml.color.shape, (D.L + (F.isImg ? 0 : D.bLW)), (D.T + (F.isImg ? 0 : D.bTW)), (D.W - 1), (D.H - 1), 0);
        H(F.vml.image.shape, (D.L + D.bLW), (D.T + D.bTW), (D.W), (D.H), 1);
        J = {
            "X": 0,
            "Y": 0
        };
        if (F.isImg) {
            J.X = parseInt(I.paddingLeft, 10) + 1;
            J.Y = parseInt(I.paddingTop, 10) + 1
        } else for (_ in J) if (J.hasOwnProperty(_)) this.figurePercentage(J, D, _, I["backgroundPosition" + _]);
        F.vml.image.fill.position = (J.X / D.W) + "," + (J.Y / D.H);
        C = I.backgroundRepeat;
        $ = {
            "T": 1,
            "R": D.W + G,
            "B": D.H,
            "L": 1 + G
        };
        B = {
            "X": {
                "b1": "L",
                "b2": "R",
                "d": "W"
            },
            "Y": {
                "b1": "T",
                "b2": "B",
                "d": "H"
            }
        };
        if (C != "repeat" || F.isImg) {
            A = {
                "T": (J.Y),
                "R": (J.X + D.w),
                "B": (J.Y + D.h),
                "L": (J.X)
            };
            if (C.search("repeat-") != -1) {
                E = C.split("repeat-")[1].toUpperCase();
                A[B[E].b1] = 1;
                A[B[E].b2] = D[B[E].d]
            }
            if (A.B > D.H) A.B = D.H;
            F.vml.image.shape.style.clip = "rect(" + A.T + "px " + (A.R + G) + "px " + A.B + "px " + (A.L + G) + "px)"
        } else F.vml.image.shape.style.clip = "rect(" + $.T + "px " + $.R + "px " + $.B + "px " + $.L + "px)"
    },
    figurePercentage: function(C, D, _, $) {
        var B, A;
        A = true;
        B = (_ == "X");
        switch ($) {
        case "left":
        case "top":
            C[_] = 0;
            break;
        case "center":
            C[_] = 0.5;
            break;
        case "right":
        case "bottom":
            C[_] = 1;
            break;
        default:
            if ($.search("%") != -1) C[_] = parseInt($, 10) / 100;
            else A = false
        }
        C[_] = Math.ceil(A ? ((D[B ? "W": "H"] * C[_]) - (D[B ? "w": "h"] * C[_])) : parseInt($, 10));
        if (C[_] % 2 === 0) C[_]++;
        return C[_]
    },
    fixPng: function(B) {
        B.style.behavior = "none";
        var A, D, C, $, _;
        if (B.nodeName == "BODY" || B.nodeName == "TD" || B.nodeName == "TR") return;
        B.isImg = false;
        if (B.nodeName == "IMG") {
            if (B.src.toLowerCase().search(/\.png$/) != -1) {
                B.isImg = true;
                B.style.visibility = "hidden"
            } else return
        } else if (B.currentStyle.backgroundImage.toLowerCase().search(".png") == -1) return;
        A = DD_belatedPNG;
        B.vml = {
            color: {},
            image: {}
        };
        D = {
            shape: {},
            fill: {}
        };
        for ($ in B.vml) if (B.vml.hasOwnProperty($)) {
            for (_ in D) if (D.hasOwnProperty(_)) {
                C = A.ns + ":" + _;
                B.vml[$][_] = document.createElement(C)
            }
            B.vml[$].shape.stroked = false;
            B.vml[$].shape.appendChild(B.vml[$].fill);
            B.parentNode.insertBefore(B.vml[$].shape, B)
        }
        B.vml.image.shape.fillcolor = "none";
        B.vml.image.fill.type = "tile";
        B.vml.color.fill.on = false;
        A.attachHandlers(B);
        A.giveLayout(B);
        A.giveLayout(B.offsetParent);
        B.vmlInitiated = true;
        A.applyVML(B)
    }
};
try {
    document.execCommand("BackgroundImageCache", false, true)
} catch(r) {}
DD_belatedPNG.createVmlNameSpace();
DD_belatedPNG.createVmlStyleSheet();