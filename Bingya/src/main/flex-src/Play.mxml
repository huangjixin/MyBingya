<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:skins="components.skins.*"
			   xmlns:components="components.*"
			   minWidth="0" minHeight="0"
			   creationComplete="application1_creationCompleteHandler(event)">
	<fx:Declarations>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.bingya.common.Global;
			
			import components.model.Page;
			import components.model.Section;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import org.osmf.events.MediaPlayerStateChangeEvent;
			import org.osmf.events.TimeEvent;
			import org.osmf.media.MediaPlayerState;
			
			[Bindable]
			private var currentPageIndex:int = -1;  //当前页面
			
			[Bindable]
			private var videoFilePath:String = "media/";		//视频路径
			
			[Bindable]
			private var sections:ArrayCollection = new ArrayCollection();		//视频路径
			
			[Bindable]
			private var titles:ArrayCollection = new ArrayCollection();		//标题
			
			private var rectAngle:Rectangle = new Rectangle();
			
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				FlexGlobals.topLevelApplication.parameters;
				// 设置初始化参数。
				Global.getInstance().setUrl();
				 var urlloader:URLLoader = new URLLoader();
				urlloader.load(new URLRequest("data/presentation.xml"));
				urlloader.addEventListener(Event.COMPLETE,function loaderComplete(event:Event):void{
					var xml:XML = new XML(urlloader.data);
					if(xml){
						var VideoXmllist:XMLList = xml.Video;
						if(VideoXmllist && VideoXmllist.length()>0){
							videoFilePath = "media/"
							videoFilePath+= VideoXmllist[0].toString();
							videoFilePath+= ".flv";
						}
						
						var sectionXmllist:XMLList = xml.Courseware.Section;
						if(sectionXmllist && sectionXmllist.length()>0){
							if(sections.length>0){
								sections.removeAll();
							}
							for each (var sectionXml:XML in sectionXmllist) 
							{
								var title:String = sectionXml.title;
								var start:String = sectionXml.time.start;
								var end:String = sectionXml.time.end;
								var source:String = "ppt/"+sectionXml.source;
								var section:Section = new Section(title,new Number(start),new Number(end),source);
								sections.addItem(section);
							}
							
						}
					}
					
					//先加载配置文件，再加载标题文件。
					var titleurlloader:URLLoader = new URLLoader();
					titleurlloader.load(new URLRequest("ppt/title.xml"));
					titleurlloader.addEventListener(Event.COMPLETE,function loaderComplete(event:Event):void{
						var xml:XML = new XML(titleurlloader.data);
						if(xml){
							var PageXmllist:XMLList = xml.Page;
							if(PageXmllist && PageXmllist.length()>0){
								titles.removeAll();
								for(var i:int = 0;i< PageXmllist.length();i++) 
								{
									var  pageXml:XML = PageXmllist[i];
									var Title:String = pageXml.Title;
									var Id:String = pageXml.@Id;
									var Content:String = pageXml.Content;
									var start:String;
									var end:String;
									if(sections.length>0){
										if(i<sections.length){
											var section:Section = sections.getItemAt(i) as Section;
											if(section){
												start = section.start/1000+"";
												end = section.end/1000+"";
											}
										}
									}
									var page:Page = new Page(Id,Title,Content,start,end);
									titles.addItem(page);
								}
							}
						}
					});
					titleurlloader.addEventListener(IOErrorEvent.IO_ERROR,function titleurlloaderError(event:IOErrorEvent):void{
						if(sections.length>0){
							titles.removeAll();
							for (var i:int = 0; i < sections.length; i++) 
							{
								var Title:String = "第"+(i+1)+"节";
								var Id:String = (i+1)+"";
								var Content:String = "";
								var start:String;
								var end:String;
								if(sections.length>0){
									if(i<sections.length){
										var section:Section = sections.getItemAt(i) as Section;
										if(section){
											start = section.start/1000+"";
											end = section.end/1000+"";
										}
									}
								}
								var page:Page = new Page(Id,Title,Content,start,end);
								titles.addItem(page);
							}
							
						}
					});
				});
				
				urlloader.addEventListener(IOErrorEvent.IO_ERROR,function loaderIoError(event:IOErrorEvent):void{
					Alert.show("加载不了data/presentation.xml配置文件");
				}); 
				
				/* var videoFile:String = FlexGlobals.topLevelApplication.parameters.videoFile;
				if(videoFile){
					videoFilePath = videoFile;
//					videoPlayer.source = "media/221_1380351953093.flv";
//					videoPlayer.play();
				}
				
				var sectionStr:Object = FlexGlobals.topLevelApplication.parameters.sections;
				if(sectionStr){
					var xml:XML = new XML(sectionStr);
					if(xml){
						var sectionXmllist:XMLList = xml.Section;
						if(sectionXmllist && sectionXmllist.length()>0){
							if(sections.length>0){
								sections.removeAll();
							}
							for each (var sectionXml:XML in sectionXmllist) 
							{
								var title:String = sectionXml.title;
								var start:String = sectionXml.time.start;
								var end:String = sectionXml.time.end;
								var source:String = sectionXml.source;
								var section:Section = new Section(title,new Number(start),new Number(end),source);
								sections.addItem(section);
							}
						}
					}
				}  */
				
				addEventListener(KeyboardEvent.KEY_DOWN,onKeyDown);
			}
			
			/**
			 * 时间变化。
			 */ 
			protected function videoPlayer_currentTimeChangeHandler(event:TimeEvent):void
			{
				var currentTime:Number = videoDisplay.currentTime*1000;
				//遍历sections，判断当前时间点落在哪个区间，然后重新加载flash文件。
				if(sections.length>0){
					for (var i:int = 0; i < sections.length; i++) 
					{
						var section:Section = sections[i] as Section;
						
						if(section.start < currentTime && currentTime<section.end){
							if(i != currentPageIndex){
								currentPageIndex = i;
								swfLoader.source = section.source;
							}
							
							if(titles.length>0){
								if(currentPageIndex < titles.length){
									dataGrid.selectedIndex = currentPageIndex;
								}
							}
							break;
						}
					}
				}
			}
			
			/**
			 * 状态变化。
			 */ 
			protected function videoPlayer_mediaPlayerStateChangeHandler(event:MediaPlayerStateChangeEvent):void
			{
				var state:String = event.state;
				switch(state){
					case MediaPlayerState.PLAYING:
						/* if(sections.length>0){
							if(currentPageIndex ==-1){
								currentPageIndex =0;
								swfLoader.source = "ppt/"+sections[0].source;
							}
						} */
						break;
					default:
						break;
				}
			}
			
			protected function onKeyDown(event:KeyboardEvent):void
			{
				switch(event.keyCode)
				{
					case Keyboard.ESCAPE:
					{
						if(stage.displayState==StageDisplayState.NORMAL){
							stage.displayState=StageDisplayState.FULL_SCREEN;
							this.rectAngle.width = swfLoader.width;
							this.rectAngle.height= swfLoader.height;
							
							swfLoader.width = stage.height+300;
							swfLoader.height = stage.height;
							videoGroup.visible = false;
							//					scroller.width = stage.width;
							//					scroller.height = stage.height;
						}else if(stage.displayState==StageDisplayState.FULL_SCREEN){
							stage.displayState=StageDisplayState.NORMAL;
							//					scroller.width = 740;
							//					scroller.height = 500;
							swfLoader.width = this.rectAngle.width;
							swfLoader.height = this.rectAngle.height;
							videoGroup.visible = true;
						}
						break;
					}
						
					default:
					{
						break;
					}
				}
			}
			private var isFullScr:Boolean;
			
			protected function swfLoader_doubleClickHandler(event:MouseEvent):void
			{
				isFullScr =!isFullScr;
				
				if(isFullScr){
//					stage.displayState=StageDisplayState.FULL_SCREEN;
					this.rectAngle.width = swfLoader.width;
					this.rectAngle.height= swfLoader.height;
					
					swfLoader.width = stage.height+270;
					swfLoader.height = stage.height;
					dataGrid.visible = false;
//					videoGroup.right = -videoPlayer.width*2/3;
//					videoPlayer.playerControls.visible = false;
//					videoGroup.visible = false;
//					scroller.width = stage.width;
//					scroller.height = stage.height;
				}else{
//					stage.displayState=StageDisplayState.NORMAL;
//					scroller.width = 740;
//					scroller.height = 500;
					swfLoader.width = this.rectAngle.width;
					swfLoader.height = this.rectAngle.height;
					dataGrid.visible = true;
//					videoPlayer.playerControls.visible = true;
//					videoGroup.right = -videoPlayer.width-2;
//					videoGroup.visible = true;
				}
			}
			
			
			
		]]>
	</fx:Script>
	<s:VGroup horizontalCenter="0" verticalCenter="0">
		<s:HGroup gap="0" horizontalCenter="0" verticalCenter="0">
			<s:Rect id="rect" left="-2" right="-2" top="-2" bottom="-2">
				<s:fill>
					<s:SolidColor alpha="{currentPageIndex == -1 ? 0.5 : 0}" color="green"/>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke alpha="0.5" color="gray"/>
				</s:stroke>
			</s:Rect>
			<!--<s:Scroller id="scroller" width="740" height="500">
			<s:Group>
			
			</s:Group>
			</s:Scroller>-->
			<s:SWFLoader id="swfLoader" width="700" height="500"
						 doubleClick="swfLoader_doubleClickHandler(event)"
						 doubleClickEnabled="false"/>
			<s:Group id="videoGroup">
				<s:VideoDisplay id="videoDisplay"
								currentTimeChange="videoPlayer_currentTimeChangeHandler(event)"
								mediaPlayerStateChange="videoPlayer_mediaPlayerStateChangeHandler(event)"
								source="{videoFilePath}"/>
				<s:DataGrid id="dataGrid" top="{videoDisplay.height+5}" width="{videoDisplay.width}"
							height="{swfLoader.height-videoDisplay.height-5}"
							dataProvider="{titles}">
					<s:columns> 
						<s:ArrayList>
							<s:GridColumn width="25" dataField="Id" headerText="Id"/> 
							<s:GridColumn dataField="Title" headerText="标题"/> 
							<s:GridColumn dataField="start" headerText="起始秒数"/> 
							<s:GridColumn dataField="end" headerText="结束"/> 
						</s:ArrayList>
					</s:columns> 
				</s:DataGrid>
			</s:Group>
		</s:HGroup>
		<components:VideoControl id="videoControl" width="100%"
								 skinClass="components.skins.VideoControlSkin"
								 videoDisplay="{videoDisplay}"/>
	</s:VGroup>
	
</s:Application>
