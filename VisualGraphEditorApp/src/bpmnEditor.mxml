<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:graphic="com.hjx.graphic.*"
			   xmlns:local="*"
			   xmlns:diagram="com.hjx.diagram.*"
			   xmlns:editor="com.hjx.diagram.editor.*"
			   xmlns:graphlayout="com.hjx.graphic.graphlayout.*"
			   xmlns:graphic1="com.hjx.bpmn.graphic.*"
			   minWidth="955" minHeight="600" creationComplete="application1_creationCompleteHandler(event)" xmlns:map="map.*">
	<fx:Style source="bpmgraphic.css">
		
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.hjx.bpmn.graphic.ConnectingObject;
			import com.hjx.bpmn.graphic.FlowObject;
			import com.hjx.bpmn.graphic.HorizontalPool;
			import com.hjx.bpmn.graphic.LaneBase;
			import com.hjx.bpmn.graphic.VerticalLane;
			import com.hjx.bpmn.graphic.VerticalPool;
			import com.hjx.diagram.events.DiagramEditorEvent;
			import com.hjx.diagram.serialization.XMLSerializer;
			import com.hjx.graphic.Graph;
			import com.hjx.graphic.Link;
			import com.hjx.graphic.LinkConnectionArea;
			import com.hjx.graphic.Node;
			import com.hjx.graphic.Renderer;
			import com.hjx.graphic.SubGraph;
			import com.hjx.jbpm.Event;
			import com.hjx.jbpm.Exception_handler;
			import com.hjx.jbpm.Handler;
			import com.hjx.jbpm.JbpmBase;
			import com.hjx.jbpm.Swim_lane;
			import com.itsm.common.Global;
			import com.itsm.designer.controller.DesignerProviderEvent;
			import com.itsm.designer.model.DesignerProviderRemoteProxy;
			import com.itsm.designer.view.CreateProcessTitleWin;
			import com.itsm.designer.view.InstallProcessTitleWin;
			import com.itsm.designer.view.RendererEditeTitleWin;
			
			import flash.globalization.NumberFormatter;
			
			import mx.collections.ArrayCollection;
			import mx.collections.HierarchicalData;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IVisualElementContainer;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.MoveEvent;
			import mx.formatters.DateFormatter;
			import mx.graphics.ImageSnapshot;
			import mx.managers.PopUpManager;
			
			import spark.effects.Resize;
			import spark.formatters.NumberFormatter;
			
			private var file:FileReference;
			private var currentFileName:String="";
			
			[Bindable]
			private var proecessdefinitionName:String="";
			private var processdesc:String = "";
			private var domainId:String="";
			
			private var designerProxy:DesignerProviderRemoteProxy;
						
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				//获得domainId参数；
				domainId = FlexGlobals.topLevelApplication.parameters["domainId"];
				
				var url:String = "";
				var endPoint:String = "";
				url = FlexGlobals.topLevelApplication.url;
				
				var array:Array = url.split("/");
				if(array && array.length>1){
					//		endPoint = array[0]+ "//" + array[1]+ array[2];
					endPoint = array[0]+ "//" + array[1]+ array[2] + "/" + array[3]; //发布web文件夹下面
					
					url = array[0]+ "//" + array[1]+ array[2] + "/" + array[3]+ "/" + array[4];
					Global.getInstance().url = url;
					//确定端点；
					//Global.getInstance().endPoint = 'messagebroker/amf';
					Global.getInstance().endPoint = endPoint + "/"+'messagebroker/amf';
				}
				
				designerProxy = new DesignerProviderRemoteProxy();
				
//				popupMenuFactory = new DiagramMenuFactory(diagramEditor, diagram);
//				titlePanel.contextMenu = popupMenuFactory.getPopupMenu(); 
				
				if (!contextMenu) {  
					 this.contextMenu = new ContextMenu();  
				} 

				contextMenu.hideBuiltInItems();
				var conMenuItem:ContextMenuItem = new ContextMenuItem("删除所选对象",true);
				conMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,function onMenuItemSelect(event:ContextMenuEvent):void{
					diagramEditor.deleteSelection();
				});
				this.contextMenu.customItems = [conMenuItem];
			}
			
			// -----------------------------------------
			// 保存和加载
			// -----------------------------------------
			private var isModified:Boolean;
			
			private var jbpmXml:XML;
			private var currentTime:String;
			private var remoteSaved:Boolean;
			
			private function saveXML() : void 
			{
				file = new FileReference();
				var xml:XML = new XMLSerializer().serialize(diagramEditor.graph, "BpmnDiagram");
				var fileName:String = currentFileName;
				if(fileName == null)
					fileName = "bpmn图形描述文件"+".xml";
				file.addEventListener(flash.events.Event.COMPLETE, fileSaved);
				file.addEventListener(flash.events.IOErrorEvent.IO_ERROR, ioError);
				file.save(xml, fileName);
			}
			
			private function fileSaved(event:flash.events.Event) : void 
			{
				if(file != null){
					currentFileName = file.name;
					isModified = false;
					
					file = null;
				}
			}
			
			private function loadXML() : void 
			{
				if(isModified){
					Alert.show("流程没有保存哦","",
						Alert.YES|Alert.NO, this, loadAlertCloseHandler, null, Alert.NO);
				} else {
					doLoadXML();
				}
			}
			
			private function loadAlertCloseHandler(event:CloseEvent) : void 
			{
				if(event.detail == Alert.YES)
					doLoadXML();
			}
			
			private function doLoadXML(): void
			{
				var xmlFileFileFilter:FileFilter = new
					FileFilter("xml流程描述文件", "*.xml");
				file = new FileReference();
				file.addEventListener(flash.events.Event.SELECT, fileSelectedForLoad);
				file.browse([xmlFileFileFilter]);
			}
			
			private function fileSelectedForLoad(event:flash.events.Event) : void 
			{
				if(file != null){
					file.addEventListener(flash.events.Event.COMPLETE, fileLoaded);
					file.addEventListener(flash.events.IOErrorEvent.IO_ERROR, ioError);
					file.load();
				}
			}
			
			private function fileLoaded(event:flash.events.Event) : void 
			{
				if(file != null){
					try {
						var xml:XML = new XML(file.data.toString());
						if(xml.localName() != "BpmnDiagram"){
							Alert.show("该文件不是流程文件");
							return;
						}
						diagramEditor.clear();
						new XMLSerializer().deserialize(diagramEditor.graph, xml);
						currentFileName = file.name;
						isModified = false;
//						undoManager.clearUndo();
					} catch(err:Error){
						Alert.show(err.message);
					}
					file = null;
				}
			}    
			
			private function ioError(event:IOErrorEvent) : void 
			{
				var msg:String = event.text;
				var title:String = "出错";
				Alert.show(msg, title, Alert.OK|Alert.CANCEL, null, ioErrorAlertHandler);
			}
			
			private function ioErrorAlertHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.OK)
					saveXML();        
			}
			//-------------------------------------------------------------------------------------------
			// 克隆函数。
			//-------------------------------------------------------------------------------------------
			private function cloneFunction(obj:Renderer, clone:Renderer, playResize:Boolean = false) : void 
			{
				var resize:Resize = new Resize(clone);
					/* if(clone is SubProcess){
						clone.width = resourceManager.getNumber("bpmeditor", "bpmeditor.subprocess.drop.width");
						clone.height = resourceManager.getNumber("bpmeditor", "bpmeditor.subprocess.drop.height");
					} else if(clone is com.ibm.ilog.elixir.diagram.HPool){
						clone.width = resourceManager.getNumber("bpmeditor", "bpmeditor.hpool.drop.width");
					} else if(clone is com.ibm.ilog.elixir.diagram.HLane){
						clone.height = resourceManager.getNumber("bpmeditor", "bpmeditor.hlane.drop.height");
					} else if(clone is com.ibm.ilog.elixir.diagram.VPool){
						clone.height = resourceManager.getNumber("bpmeditor", "bpmeditor.vpool.drop.height");
					} else if(clone is com.ibm.ilog.elixir.diagram.VLane){
						clone.width = resourceManager.getNumber("bpmeditor", "bpmeditor.vlane.drop.width");
					} else if(clone is bpm.graphic.ConnectingObject){
						bpm.graphic.ConnectingObject(clone).label = "";
					} else if(clone is bpm.graphic.Group){
						bpm.graphic.Group(clone).clickableInside = false;
					} */
					if(clone is HorizontalPool){
						if (playResize) 
						{
							resize.widthTo = 500;	
							resize.play();
						}
						else 
							clone.width = 500;	
						
					} else if(clone is VerticalPool){
						if (playResize) 
						{
							resize.heightTo = 500;	
							resize.play();
						}
						else 
							clone.height = 500;
					} else if(clone is SubProcess){
						if (playResize) 
						{
							resize.widthTo = 200;	
							resize.heightTo = 200;	
							resize.play();
						}
						else {
							clone.height = 200;
							clone.width = 200;						
						}
					}else if(clone is HorizontalLane){
						if (playResize) 
						{
							resize.widthTo = 480;	
							resize.play();
						}
						else {
							clone.width = 480;					
						}
					}else if(clone is VerticalLane){
						if (playResize) 
						{
							resize.heightTo = 480;	
							resize.play();
						}
						else {
							clone.height = 480;					
						}
					}
				
				
				/* if(clone is SubProcess){
					if(SubProcess(obj).nodeLayout != null)
						SubProcess(clone).nodeLayout = SubProcess(obj).nodeLayout.copy();
				}   */             
			}
			
			protected function setProBtn_clickHandler(event:MouseEvent):void
			{
				var selObjs:Vector.<Renderer>  = diagramEditor.getSelectedObjects();
				if(selObjs.length>0){
					for each (var renderer:Renderer in selObjs) 
					{
						if(renderer is Task){
							var task:Task = renderer as Task;
							task.task.description = "任务描述";
							task.task.commonNodeElements.async= false;
							
							var exhandler:Exception_handler = new Exception_handler();
							exhandler.name = "异常";
							
							task.task.commonNodeElements.exception_handlers[0] = exhandler;
						}
					}
					
				}
			}
			
			protected function getJbpmBtn_clickHandler(event:MouseEvent= null):void
			{
				jbpmXml= new XML('<?xml version="1.0" encoding="UTF-8"?><process-definition/>');
				var exceptionXml:XML = new XML('<exception-handler exception-class="org.wbase.framework.jbpm.extend.ExceptionHandler"/>');
				jbpmXml.appendChild(exceptionXml);

				serializeToJbpm();
				file = new FileReference();
				
				file.addEventListener(flash.events.Event.COMPLETE, fileProcessSaved);
				file.addEventListener(flash.events.IOErrorEvent.IO_ERROR, ioError);
				file.save(jbpmXml, proecessdefinitionName+new Date().milliseconds+".xml");
			}
			
			private function fileProcessSaved(event:flash.events.Event) : void 
			{
				if(file != null){
//					this.proecessdefinitionName = file.name;
					file = null;
				}
			}
			
			
			public function serializeToJbpm():void{
				for (var i:int = 0;i<diagramEditor.graph.numElements;i++) 
				{
					var ele:Renderer = diagramEditor.graph.getElementAt(i) as Renderer;
					serializeRenderer(ele);
				}
			}
			
			public function serializeRenderer(renderer:Renderer):void{
				var outgoingLinks:Vector.<Link>;
				var connectObject:ConnectingObject;
				var flag:int = 0;
				var endFlowObject:FlowObject;
				
				if(renderer is StartEvent ){
					var startEvent:StartEvent = renderer as StartEvent;
					outgoingLinks = startEvent.getOutgoingLinks();
					if(outgoingLinks.length > 1){
						Alert.show("开始节点只能有一条连线");
						return;
					}
					
					for each (connectObject in outgoingLinks) 
					{
						connectObject.transition.name = connectObject.label;
						endFlowObject = connectObject.endNode as FlowObject; 
						if(!endFlowObject){
							continue;
						}
						
						if(endFlowObject is Task){
							connectObject.transition.to = Task(endFlowObject).task.name;
						}else if(endFlowObject is EndEvent){
							connectObject.transition.to = EndEvent(endFlowObject).end_state.name;
						}else if(endFlowObject is Gateway){
							connectObject.transition.to = Gateway(endFlowObject).decision.name;
						}
						
					}
					if(connectObject){
						StartEvent(renderer).star_state.transition = connectObject.transition;
					}
					jbpmXml.appendChild(StartEvent(renderer).star_state.toXml());
				}else if(renderer is Task ){
					var task:Task = renderer as Task;
					task.task.task.name = task.label;
					outgoingLinks = task.getOutgoingLinks();
					flag = 0;
					
					for each(connectObject in outgoingLinks) 
					{
						connectObject.transition.name = connectObject.label;
						endFlowObject = connectObject.endNode as FlowObject; 
						if(!endFlowObject){
							continue;
						}
						if(endFlowObject is Task){
							connectObject.transition.to = Task(endFlowObject).label;
						}else if(endFlowObject is EndEvent){
							connectObject.transition.to = EndEvent(endFlowObject).label;
						}else if(endFlowObject is StartEvent){
							connectObject.transition.to = StartEvent(endFlowObject).label;
						}else if(endFlowObject is Gateway){
							connectObject.transition.to = Gateway(endFlowObject).label;
						}
						
						Task(renderer).task.commonNodeElements.transitions[flag] = connectObject.transition;
						flag++;
					}
					
					var parentGraph:Renderer = DiagramEditor.getRenderer(task.parent);
					var parentLane:LaneBase;
					if(parentGraph && parentGraph is LaneBase){
						parentLane = parentGraph as LaneBase;
						var swimlane:Swim_lane = new Swim_lane();
						swimlane.name = parentLane.swimlane.name;
//						task.task.task.swimlane = swimlane;
						task.task.task.swimlane = parentLane.swimlane.name;;
					} 
					jbpmXml.appendChild(Task(renderer).task.toXml());
				}else if(renderer is ConnectingObject ){
					//貌似不用序列化连线对象。
//					jbpmXml.appendChild(ConnectingObject(renderer).transition.toXml());
				}else if(renderer is Gateway ){
					var gateway:Gateway = renderer as Gateway;
					outgoingLinks = gateway.getOutgoingLinks();
					flag = 0;
					
					for each (connectObject in outgoingLinks) 
					{
						connectObject.transition.name = connectObject.label;
						endFlowObject = connectObject.endNode as FlowObject; 
						if(!endFlowObject){
							continue;
						}
						
						if(endFlowObject is Task){
							connectObject.transition.to = Task(endFlowObject).task.task.name;
						}else if(endFlowObject is EndEvent){
							connectObject.transition.to = EndEvent(endFlowObject).end_state.name;
						}else if(endFlowObject is StartEvent){
							connectObject.transition.to = StartEvent(endFlowObject).star_state.name;
						}else if(endFlowObject is Gateway){
							connectObject.transition.to = Gateway(endFlowObject).decision.name;
						}
						
						Gateway(renderer).decision.commonNodeElements.transitions[flag] = connectObject.transition;
						flag++;
					}
					
					jbpmXml.appendChild(Gateway(renderer).decision.toXml());
				}else if(renderer is EndEvent ){
					jbpmXml.appendChild(EndEvent(renderer).end_state.toXml());
				}else if(renderer is SubGraph){
					if(renderer is LaneBase){
						var swinlane:Swim_lane = LaneBase(renderer).swimlane;
						jbpmXml.appendChild(LaneBase(renderer).swimlane.toXml());
					}
					
					for (var i:int = 0;i<LaneBase(renderer).numElements;i++) 
					{
						var ele:Renderer = LaneBase(renderer).getElementAt(i) as Renderer;
						serializeRenderer(ele);
					}
					
				}
				
			}
			
			///////////////////////////////////////////////////////////////////////////////////////
			//       DiagramEditorEvent 事件处理函数。
			///////////////////////////////////////////////////////////////////////////////////////
			protected function diagramEditor_editor_double_clickHandler(event:DiagramEditorEvent):void
			{
				var renderer:Renderer = event.object as Renderer;
				if(renderer && renderer is LaneBase){
					var lanebase:LaneBase = renderer as LaneBase;
					if(lanebase.label == "流程启动者"){
						return;
					}
				}
				
				var rendererEditeTitleWin:RendererEditeTitleWin = PopUpManager.createPopUp(this,RendererEditeTitleWin) as RendererEditeTitleWin;
				PopUpManager.centerPopUp(rendererEditeTitleWin);
				var domainid:Number = new Number(domainId);
				rendererEditeTitleWin.domainId = domainid;
				rendererEditeTitleWin.renderer = event.object as Renderer;
			}
			
			
			internal function createStartLane():Swim_lane{
				var swimlane:Swim_lane = new Swim_lane();
				swimlane.assignment.className = "org.wbase.framework.jbpm.extend.ProcessStarterAssignmentHandler";
				return swimlane;
			}
			
			/***
			 * 保存到服务器。 
			 */
			protected function remoteSaveBtn_clickHandler(event:MouseEvent):void
			{
				//获取图元信息；
				var xml:XML = new XMLSerializer().serialize(diagramEditor.graph, "BpmnDiagram");
				//抽取jbpm信息；
				jbpmXml= new XML('<?xml version="1.0" encoding="UTF-8"?><process-definition/>');
				var exceptionXml:XML = new XML('<exception-handler exception-class="org.wbase.framework.jbpm.extend.ExceptionHandler"/>');
				var desc:XML = new XML('<description>'+processdesc+'</description>');
				jbpmXml.@name= proecessdefinitionName;
				jbpmXml.@version=currentTime;
				jbpmXml.appendChild(desc);
				jbpmXml.appendChild(exceptionXml);
				
				serializeToJbpm();
				var imageSnapshot:ImageSnapshot = ImageSnapshot.captureImage(diagramEditor);
				var base64String:String = ImageSnapshot.encodeImageAsBase64(imageSnapshot);
				designerProxy.saveProcessDefinition(new Number(domainId),this.proecessdefinitionName,currentTime,jbpmXml.toXMLString(),xml.toXMLString(),base64String);
				designerProxy.addEventListener(DesignerProviderEvent.SAVE_PROCESS_DEFINITION_FAULT,onSaveFault);
				designerProxy.addEventListener(DesignerProviderEvent.SAVE_PROCESS_DEFINITION_RESULT,onSaveReult);
			}
			
			protected function onSaveReult(event:DesignerProviderEvent):void
			{
				remoteSaved = true;
				Alert.show("保存成功");
			}
			
			protected function onSaveFault(event:DesignerProviderEvent):void
			{
				Alert.show(event.object.toString(),"保存失败");
			}
			
			protected function createProcessBtn_clickHandler(event:MouseEvent):void
			{
				var createProc:CreateProcessTitleWin = PopUpManager.createPopUp(this,CreateProcessTitleWin,false) as CreateProcessTitleWin;
				PopUpManager.centerPopUp(createProc);
				createProc.saveBtn.addEventListener(MouseEvent.CLICK,function saveBtnClickHandler(event:MouseEvent):void{
					currentFileName = createProc.textInput.text;
					proecessdefinitionName = createProc.textInput.text;
					processdesc = createProc.textArea.text;
					var fr:DateFormatter=new DateFormatter();
					fr.formatString="YYYYMMDDJJNNSS";
					currentTime=fr.format(new Date());
					
					jbpmXml= new XML('<?xml version="1.0" encoding="UTF-8"?><process-definition/>');
					var exceptionXml:XML = new XML('<exception-handler exception-class="org.wbase.framework.jbpm.extend.ExceptionHandler"/>');
					var desc:XML = new XML('<description>'+processdesc+'</description>');
					jbpmXml.@name= proecessdefinitionName;
					jbpmXml.@version=currentTime;
					jbpmXml.appendChild(desc);
					jbpmXml.appendChild(exceptionXml);

					diagramEditor.clear();
					PopUpManager.removePopUp(createProc);
					editGroup.enabled = true;
					
					remoteSaved = false;
					diagramEditor.allowDropping = true;
				});
			}
			
			
			protected function installProcessBtn_clickHandler(event:MouseEvent):void
			{
				var installProc:InstallProcessTitleWin = PopUpManager.createPopUp(this,InstallProcessTitleWin,false) as InstallProcessTitleWin;
				installProc.domainId = new Number(domainId);
				PopUpManager.centerPopUp(installProc);
				installProc.saveBtn.addEventListener(MouseEvent.CLICK,function saveBtnClickHandler(event:MouseEvent):void{
					var item:Object = installProc.list.selectedItem;
					if(item){
						currentTime = item.VERSION;
						proecessdefinitionName = item.NAME_EN;
						designerProxy.getProcessDefinition(new Number(domainId),item.NAME_EN,item.VERSION);
						designerProxy.addEventListener(DesignerProviderEvent.GET_PROCESS_DEFINITION_FAULT,getProcessDefinitionFault);
						designerProxy.addEventListener(DesignerProviderEvent.GET_PROCESS_DEFINITION_RESULT,getProcessDefinitionResult);
					}
					diagramEditor.clear();
					PopUpManager.removePopUp(installProc);
					editGroup.enabled = true;
					diagramEditor.allowDropping = true;
				});
			}
			
			protected function getProcessDefinitionFault(event:DesignerProviderEvent):void
			{
				Alert.show(event.toString(),"查询流程出错");
			}
			
			protected function getProcessDefinitionResult(event:DesignerProviderEvent):void
			{
				var object:Object = event.object;
				try {
					var xml:XML = new XML(object.GPD.toString());
					if(xml.localName() != "BpmnDiagram"){
						Alert.show("该文件不是流程文件");
						return;
					}
					new XMLSerializer().deserialize(diagramEditor.graph, xml);
					var processXml:XML = new XML(object.PROCESSDEFINITION.toString());
					jbpmXml = new XML('<?xml version="1.0" encoding="UTF-8"?><process-definition/>');
					jbpmXml.@name = proecessdefinitionName;
					jbpmXml.@version = currentTime;
					jbpmXml.appendChild(processXml.description[0]);
					var exceptionXml:XML = new XML('<exception-handler exception-class="org.wbase.framework.jbpm.extend.ExceptionHandler"/>');
					jbpmXml.appendChild(exceptionXml);
					
					remoteSaved = false;
				} catch(err:Error){
					Alert.show(err.message);
				}
			}
			
			protected function deployBtn_clickHandler(event:MouseEvent):void
			{
				if(!remoteSaved){
					Alert.show("部署前请先保存到服务器");
					return;
				}
				designerProxy.deployProcessDefinition(new Number(domainId),proecessdefinitionName,currentTime);
				designerProxy.addEventListener(DesignerProviderEvent.DEPLOY_PROCESS_DEFINITION_FAULT,deployProcessDefinitionFault);
				designerProxy.addEventListener(DesignerProviderEvent.DEPLOY_PROCESS_DEFINITION_RESULT,deployProcessDefinitionResult);
			}
			
			protected function deployProcessDefinitionFault(event:DesignerProviderEvent):void
			{
				Alert.show(event.object.toString(),"部署流程出错");
			}
			
			protected function deployProcessDefinitionResult(event:DesignerProviderEvent):void
			{
				Alert.show(event.object.toString(),"部署流程成功");
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!--<fx:XML id="data">
			<Diagram xmlns:chg="com.hjx.graphic"
					 xmlns:chbg="com.hjx.bpmn.graphic"
					 xmlns:fg="flash.geom">  
				<chbg:Task id="task1" x="50" y="50" label="任务1"/>
				<chbg:Task id="task2" x="50" y="200" label="任务2"/>
				<chbg:StartEvent x="50" y="320" label="开始"/>
				<chbg:EndEvent x="50" y="370" label="结束"/>
				<chbg:Gateway x="50" y="420" label="网关"/>
				<chbg:TextAnnotation x="160" y="420" label="左注解"/>
				<chg:Link>
					<fallbackEndPoint>
						<fg:Point id="point5" x="600" y="400"/>
					</fallbackEndPoint>
					<fallbackStartPoint>
						<fg:Point id="point6" x="250" y="500"/>
					</fallbackStartPoint>
				</chg:Link>
					
				<chg:SubGraph x="200" y="50" width="200" height="200" label="Graph 1">
					<chbg:Task id="task3" x="10" y="0" label="任务3"/>
					<chbg:Task x="10" y="50" label="Node 12"/>
					<chg:SubGraph x="100" y="60" width="200" height="200" label="Graph 2">
						<chbg:Task x="0" y="0" label="Node 21"/>
						<chbg:Task x="60" y="60" label="Node 22"/>
					</chg:SubGraph>  
				</chg:SubGraph>
				<chg:Link endNode="task2" startNode="task1">
				</chg:Link>
			</Diagram>
		</fx:XML>
		<mx:HierarchicalCollectionView xmlns:chg="com.hjx.graphic"
									   xmlns:chbg="com.hjx.bpmn.graphic"
									   xmlns:chg="com.hjx.graphic"
									   id="hcv" showRoot="false"
									   source="{new HierarchicalData(data)}"/>-->
	</fx:Declarations>
	<mx:HDividedBox xmlns:chg="com.hjx.graphic"
					xmlns:chbg="com.hjx.bpmn.graphic"
					width="100%" height="100%">
		<s:Panel width="200" height="100%" title="图形面板">
			<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingTop="10">
				<s:ButtonBar dataProvider="{rendererView}">
					<s:layout>
						<s:VerticalLayout rowHeight="50" gap="0" paddingLeft="0" paddingRight="0"/>
					</s:layout>
				</s:ButtonBar>
				
				<!--<s:TabBar width="100%" dataProvider="{rendererView}"/>-->
				<mx:ViewStack id="rendererView" width="100%" height="100%" creationPolicy="all">
					<s:NavigatorContent width="100%" height="100%" label="任务"
										backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:Task label="任务"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette width="100%" height="30">
								<graphic1:SequenceFlow label="时序流"
													   fallbackEndPoint="{new Point(170,10)}"
													   fallbackStartPoint="{new Point(10,10)}"
													   shapeType="straight"
													   color="red"/>
								<!--<graphic1:Task label="任务" loop="true"/>-->
							</editor:DiagramPalette>
							<editor:DiagramPalette  width="100%" height="30">
								<graphic1:SequenceFlow label="时序流"
													   fallbackEndPoint="{new Point(170,10)}"
													   fallbackStartPoint="{new Point(10,20)}"
													   shapeType="orthogonal"
													   color="red"/>
								<!--<graphic1:Task label="任务" compensation="true"/>-->
							</editor:DiagramPalette>
							<!--<editor:DiagramPalette>
								<graphic1:Task label="任务" multiInstance="true"/>
							</editor:DiagramPalette>-->
						</editor:DiagramPalette>
						
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="开始事件"
										backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:StartEvent label="开始"/>
							</editor:DiagramPalette>
							<!--<editor:DiagramPalette>
								<graphic1:StartEvent label="开始" trigger="Message"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:StartEvent label="开始" trigger="Timer"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:StartEvent label="开始" trigger="Error"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:StartEvent label="开始" trigger="Compensation"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:StartEvent label="开始" trigger="Rule"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:StartEvent label="开始" trigger="Multiple"/>
							</editor:DiagramPalette>-->
						</editor:DiagramPalette>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="结束事件"
										backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:EndEvent label="结束"/>
							</editor:DiagramPalette>
							<!--<editor:DiagramPalette>
								<graphic1:EndEvent label="结束" trigger="Message"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:EndEvent label="结束" trigger="Timer"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:EndEvent label="结束" trigger="Error"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:EndEvent label="结束" trigger="Compensation"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:EndEvent label="结束" trigger="Rule"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:EndEvent label="结束" trigger="Multiple"/>
							</editor:DiagramPalette>-->
						</editor:DiagramPalette>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="网关"
										backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:Gateway label="网关"/>
							</editor:DiagramPalette>
							<!--<editor:DiagramPalette>
								<graphic1:Gateway label="网关" gatewayType="AND"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:Gateway label="网关" gatewayType="OR"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:Gateway label="网关" gatewayType="Complex"/>
							</editor:DiagramPalette>-->
						</editor:DiagramPalette>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="子流程"
										backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:SubProcess width="120" height="120" label="子流程"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:SubProcess width="120" height="120" label="子流程"
													 adHoc="true"/>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="甬道池"
										backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<!--<editor:DiagramPalette>
								<graphic1:HorizontalPool width="120" height="120" label="横甬道池">
									<graphic1:HorizontalLane width="100%" height="60" label="横甬道">
									</graphic1:HorizontalLane>
									<graphic1:HorizontalLane width="100%" height="60" y="60" label="横甬道">
									</graphic1:HorizontalLane>
								</graphic1:HorizontalPool>
							</editor:DiagramPalette>-->
							<!--<editor:DiagramPalette>
								<graphic1:VerticalPool width="120" height="120" label="竖甬道池">
									<graphic1:VerticalLane width="60" height="100%" label="竖甬道">
									</graphic1:VerticalLane>
									<graphic1:VerticalLane width="60" x="60" height="100%" label="竖甬道">
									</graphic1:VerticalLane>
								</graphic1:VerticalPool>
							</editor:DiagramPalette>-->
							<editor:DiagramPalette>
								<graphic1:HorizontalLane width="120" height="120" label="横甬道">
								</graphic1:HorizontalLane>
							</editor:DiagramPalette>
							<!--<editor:DiagramPalette>
								<graphic1:HorizontalLane width="120" height="120" label="流程启动者" swimlane="{createStartLane()}">
								</graphic1:HorizontalLane>
							</editor:DiagramPalette>-->
							<editor:DiagramPalette>
								<graphic1:VerticalLane width="120" height="120" label="竖甬道">
								</graphic1:VerticalLane>
							</editor:DiagramPalette>
							<!--<editor:DiagramPalette>
								<graphic1:VerticalLane width="120" height="120" label="流程启动者" swimlane="{createStartLane()}">
								</graphic1:VerticalLane>
							</editor:DiagramPalette>-->
						</editor:DiagramPalette>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="注释"
										backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:DataObject label="注释"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:Group label="注释"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:TextAnnotation label="注释"/>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
					</s:NavigatorContent>
					
					<s:NavigatorContent width="100%" height="100%" label="连线"
										backgroundColor="#EEF0F3">
						<s:List id="linkList" width="100%" height="100%"
								change="diagramEditor.linkPrototype = IList(linkList.dataProvider).getItemAt(event.newIndex) as Link;"
								selectedIndex="1"
								creationComplete="diagramEditor.linkPrototype = IList(linkList.dataProvider).getItemAt(1) as Link;">
							<s:itemRenderer>
								<fx:Component>
									<s:ItemRenderer height="30">
										<s:states>
											<s:State name="normal"/>
											<s:State name="hovered"/>
											<s:State name="selected"/>
										</s:states>
										<s:Rect left="0" right="0" top="0" bottom="0">
											<s:fill>
												<s:SolidColor alpha="0" color="0x999999"
															  alpha.hovered="0.2"
															  alpha.selected="0.6"/>
											</s:fill>
										</s:Rect>
										<editor:DiagramPalette data="{data}"/>
									</s:ItemRenderer>
								</fx:Component>
							</s:itemRenderer>
							<s:dataProvider>
								<s:ArrayList>
									<graphic1:SequenceFlow label=""
													  fallbackEndPoint="{new Point(170,10)}"
													  fallbackStartPoint="{new Point(10,10)}"
													  shapeType="straight"
													  startConnectionArea="center"
													  endConnectionArea="center"
													  color="red"/>
									<graphic1:SequenceFlow label=""
														   fallbackEndPoint="{new Point(170,10)}"
														   fallbackStartPoint="{new Point(10,20)}"
													  startConnectionArea="center"
													  endConnectionArea="center"
													  radius="4"
													  shapeType="orthogonal"
													  color="red"/>
									<graphic1:MessageFlow label=""
													 fallbackEndPoint="{new Point(170,10)}"
													 fallbackStartPoint="{new Point(10,10)}"
													 shapeType="straight"
													 startConnectionArea="center"
													 endConnectionArea="center"
													 color="red"/>
									<graphic1:MessageFlow label=""
														  fallbackEndPoint="{new Point(170,10)}"
														  fallbackStartPoint="{new Point(10,20)}"
													 shapeType="orthogonal"
													 startConnectionArea="center"
													 endConnectionArea="center"
													 color="red"/>
									<graphic1:Association label=""
													 fallbackEndPoint="{new Point(170,10)}"
													 fallbackStartPoint="{new Point(10,10)}"
													 color="red"/>
								</s:ArrayList>
							</s:dataProvider>
						</s:List>
					</s:NavigatorContent>
				</mx:ViewStack>
			</s:VGroup>
		</s:Panel>
		<s:VGroup width="100%" height="100%">
			<s:VGroup width="100%" paddingBottom="5" paddingTop="5">
				<s:HGroup>
					<s:Button id="createProcessBtn" label="新建" click="createProcessBtn_clickHandler(event)"/>
					<s:Button id="installProcessBtn" label="装载" click="installProcessBtn_clickHandler(event)"/>
				</s:HGroup>
				<s:HGroup id="editGroup" enabled="false">
					<s:Button label="保存到本地" click="saveXML();"/>
					<s:Button label="打开本地文件" click="loadXML();"/>
					<s:Button label="连线" click="diagramEditor.connectNodes();"/>
					<s:Button id="remoteSaveBtn" label="保存到服务器" click="remoteSaveBtn_clickHandler(event)"/>
					<s:Button id="deployBtn" label="部署" click="deployBtn_clickHandler(event)"/>
					<s:Button id="getJbpmBtn" label="保存jbpm流程描述文件" click="getJbpmBtn_clickHandler(event)"/>
				</s:HGroup>
			</s:VGroup>
			<s:Panel id="titlePanel" width="100%" height="100%" title="{proecessdefinitionName}">
				<editor:DiagramEditor xmlns:chg="com.hjx.graphic"
									  id="diagramEditor" width="100%" height="100%"
									  cloneFunction="cloneFunction"
									  allowEditingText="false"
									  allowDropping="false"
									  editor_double_click="diagramEditor_editor_double_clickHandler(event)">
					<diagram:Diagram id="diagram" width="100%" height="100%"
									 automaticGraphLayout="false" labelField="@label"
									 selectionMode="multiple" xLocationField="@x"
									 yLocationField="@y">
						<!--<diagram:nodeLayout>
						<graphlayout:HierarchicalLayout id="hierarchicalLayout" flowDirection="right"/>
						</diagram:nodeLayout>-->
					</diagram:Diagram>
				</editor:DiagramEditor>
			</s:Panel>		
		</s:VGroup>
	</mx:HDividedBox>
	
	<!--<diagram:Diagram id="diagram" width="100%" height="100%"/>-->
	<!--<graphic:Graph id="graph" x="{width/2}" width="50%" height="100%"
				   mouseDown="graph_mouseDownHandler(event)">
		<graphic:SubGraph id="subGraph0" y="200" width="200" height="200">
			<graphic:SubGraph id="subGraph1" width="200" height="200">
				<graphic1:Task id="node" x="10" y="20" label="node2"/>
			</graphic:SubGraph>
		</graphic:SubGraph>
		<graphic1:Task id="node2" x="300" y="400" click="node1_clickHandler(event)"/>
		
		<graphic1:IntermediateEvent id="intermediateEvent" x="500" y="490"/>
		
		<graphic1:Group id="group" x="500" y="590" width="100" height="50"/>
		
		<graphic1:DataObject id="dataObject" x="500" y="690"/>
		<graphic:Link endNode="{task}" startNode="{startEvent}"/>
		<graphic1:Task id="task" x="100" y="20" label="申请部门活动" click="diagramEditor.connectNodes()"/>
		<graphic:Link endNode="{endEvent}" startNode="{task}"/>
		
		<graphic1:Gateway id="gateway" x="500" y="390"/>
		<graphic1:MessageFlow id="sequenceFlow" startArrowVisible="false"
							   endArrowVisible="true"
							   fallbackStartPoint="{new Point(100,100)}" fallbackEndPoint="{new Point(400,400)}"/>
		
	</graphic:Graph>-->
</s:Application>
