<?xml version="1.0" encoding="utf-8"?>
<skin:NodeSkinBase xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:skin="com.hjx.graphic.skin.*"
				   xmlns:icons="com.hjx.bpmn.graphic.icons.*"
				   width="90" height="50">
	<fx:Declarations>
		<s:GlowFilter id="glowFilter" blurX="18" blurY="18" color="#E3B01C" strength="3"/>
		
		<s:AnimateFilter id="animateWaitEffect" bitmapFilter="{glowFilter}" duration="300"
						 repeatBehavior="reverse" repeatCount="0" target="{wait}">
			<s:SimpleMotionPath property="alpha" valueFrom="0" valueTo="1"/>
		</s:AnimateFilter>
	</fx:Declarations>
	<fx:Metadata>
		[HostComponent("com.hjx.bpmn.graphic.Task")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			/**
			 *  @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				var bg:* = getStyle("backgroundColor");
				
				if (backgroundColor != bg && bg!= undefined)
				{
					backgroundColor = bg;
				}      
				
				var borderColor:* = getStyle("borderColor");
				
				if (this.borderColor != borderColor && borderColor!= undefined)
				{
					this.borderColor = borderColor;
				}      
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
		]]>
	</fx:Script>
	<skin:states>
		<s:State name="normal"/>
		<s:State name="normalAndShowsCaret"/>
		<s:State name="selected"/>
		<s:State name="selectedAndShowsCaret"/>
		<s:State name="active"/>
		<s:State name="done"/>
	</skin:states>
	<s:Group id="base" left="0" right="0" top="0" bottom="0">
		<!-- indicators for monitoring status -->
		<mx:SWFLoader id="wait" includeIn="active" right="-8" top="-16" width="16" height="16"
					  activate="{animateWaitEffect.play()}" deactivate="{animateWaitEffect.stop()}"
					  source="@Embed(source='../images/wait.svg')"/>
		<mx:SWFLoader includeIn="done" right="-8" top="-16" width="16" height="16"
					  source="@Embed(source='../images/ok.svg')"/>
		
		
		<s:Rect id="rect" left="0" right="0" top="0" bottom="0" radiusX="5" radiusY="5">
			<s:fill><s:SolidColor color="{backgroundColor}"/></s:fill>
			<s:stroke><s:SolidColorStroke color="{borderColor}" weight="2"/></s:stroke>
		</s:Rect>
		
		<s:Group id="markers"
				 visible="{hostComponent.loop || hostComponent.multiInstance || hostComponent.compensation}"
				 bottom="3" horizontalCenter="0"
				 includeInLayout="{hostComponent.loop || hostComponent.multiInstance || hostComponent.compensation}">
			<s:layout>
				<s:HorizontalLayout gap="3"/>
			</s:layout>
			<icons:BPMNIcon visible="{hostComponent.loop}" includeInLayout="{hostComponent.loop}"
							openStrokeColor="0x444444"
							skinClass="com.hjx.bpmn.graphic.icons.skin.LoopMarkerSkin"/>
			<icons:BPMNIcon visible="{hostComponent.multiInstance}"
							includeInLayout="{hostComponent.multiInstance}"
							openStrokeColor="0x444444"
							skinClass="com.hjx.bpmn.graphic.icons.skin.MultipleInstanceMarkerSkin"/>
			<icons:BPMNIcon visible="{hostComponent.compensation}" closedStrokeColor="0x444444"
							fillColor="0xdddddd" filled="true"
							includeInLayout="{hostComponent.compensation}"
							skinClass="com.hjx.bpmn.graphic.icons.skin.CompensationMarkerSkin"/>
		</s:Group>
		
		<s:Group id="labelsGroup" horizontalCenter="0" verticalCenter="{-(markers.height+5)/2}">
			<s:Label id="labelElement" maxWidth="{base.width - 2}" color="{color}" fontSize="12"
					 text="{hostComponent.label}" textAlign="center"/>
		</s:Group>
	</s:Group>
</skin:NodeSkinBase>
