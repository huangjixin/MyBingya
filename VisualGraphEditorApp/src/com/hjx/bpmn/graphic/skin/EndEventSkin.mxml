<?xml version="1.0" encoding="utf-8"?>
<skin:NodeSkinBase xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:skin="com.hjx.graphic.skin.*" xmlns:icons="com.hjx.bpmn.graphic.icons.*">
	<fx:Script>
		<![CDATA[
			import com.hjx.bpmn.graphic.icons.skin.CompensationTriggerSkin;
			import com.hjx.bpmn.graphic.icons.skin.ErrorTriggerSkin;
			import com.hjx.bpmn.graphic.icons.skin.MessageTriggerSkin;
			import com.hjx.bpmn.graphic.icons.skin.MultipleTriggerSkin;
			import com.hjx.bpmn.graphic.icons.skin.RuleTriggerSkin;
			import com.hjx.bpmn.graphic.icons.skin.TimerTriggerSkin;
			
			import mx.events.FlexEvent;
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
				if(hostComponent.trigger == "Message"){
					this.bpmnIcon.setStyle("skinClass",MessageTriggerSkin);
				}else if(hostComponent.trigger == "Timer"){
					this.bpmnIcon.setStyle("skinClass",TimerTriggerSkin);
				}else if(hostComponent.trigger == "Error"){
					this.bpmnIcon.setStyle("skinClass",ErrorTriggerSkin);
				}else if(hostComponent.trigger == "Compensation"){
					this.bpmnIcon.setStyle("skinClass",CompensationTriggerSkin);
				}else if(hostComponent.trigger == "Rule"){
					this.bpmnIcon.setStyle("skinClass",RuleTriggerSkin);
				}else if(hostComponent.trigger == "Multiple"){
					this.bpmnIcon.setStyle("skinClass",MultipleTriggerSkin);
				}else{
					bpmnIcon.visible = false;
				} 
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:GlowFilter id="glowFilter" blurX="20" blurY="20" color="0x00FF00" strength="3"/>
		
		<s:AnimateFilter id="animateWaitEffect" bitmapFilter="{glowFilter}" duration="250"
						 repeatBehavior="reverse" repeatCount="0" target="{wait}">
			<s:SimpleMotionPath property="alpha" valueFrom="0" valueTo="1"/>
		</s:AnimateFilter>
	</fx:Declarations>
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.hjx.bpmn.graphic.EndEvent")]
	</fx:Metadata>
	
	<!-- states -->
	<skin:states>
		<s:State name="active"/>
		<s:State name="done"/>
		<s:State name="normal"/>
		<s:State name="normalAndShowsCaret"/>
		<s:State name="selected"/>
		<s:State name="selectedAndShowsCaret"/>
	</skin:states>
	
	<skin:layout>
		<s:VerticalLayout gap="3" horizontalAlign="center"/>
	</skin:layout>
	
	
	
	<s:Group id="base">  
		<!-- indicators for monitoring status -->
		<mx:SWFLoader id="wait" includeIn="active" right="-8" top="-16" width="16" height="16"
					  activate="{animateWaitEffect.play()}" deactivate="{animateWaitEffect.stop()}"
					  source="@Embed(source='../images/wait.svg')"/>
		<mx:SWFLoader includeIn="done" right="-8" top="-16" width="16" height="16"
					  source="@Embed(source='../images/ok.svg')"/>
		
		<s:Ellipse id="ellipse" width="29" height="29" horizontalCenter="0" verticalCenter="0">
			<s:fill>
				<s:LinearGradient rotation="-135">
					<s:entries>
						<s:GradientEntry color="0xEDC1C1" ratio="0"/>
						<s:GradientEntry color="0xFFFFFF" ratio="1"/>
					</s:entries>
				</s:LinearGradient>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="0x9F1818" weight="4"/>
			</s:stroke>
		</s:Ellipse>
		
		<icons:BPMNIcon id="bpmnIcon" closedStrokeColor="0x9F1818" filled="false"
						horizontalCenter="{hostComponent.trigger == 'Timer' ? 0 : 0}"
						openStrokeColor="0x9F1818"
						verticalCenter="{hostComponent.trigger == 'Timer' ? 0 : 0}"
						skinClass="com.hjx.bpmn.graphic.icons.skin.MessageTriggerSkin"/>
		
	</s:Group>
	
	<s:Group id="labelsGroup">
		<s:Label id="labelElement" maxWidth="{hostComponent.maxWidth}" color="{color}" fontSize="12"
				 text="{hostComponent.label}" textAlign="center"/>
	</s:Group>
</skin:NodeSkinBase>
